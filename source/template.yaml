AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Publish an arbitrary number of revisions on ADX 
  based on a manifest object that contains a reference to all the assets.
  
Globals:
  Function:
    Timeout: 300
Parameters:
  ManifestBucket:
    Type: String
    Default: 'adx-publishing-flow-manifest-test' # new bucket that will be created in this solution
    Description: S3 Bucket name where manifest .json files will be stored
  LoggingLevel:
    Type: String
    Description: Minimum logging level to write out to CloudWatch
    AllowedValues:
    - DEBUG
    - INFO
    - WARNING
    - ERROR
    - CRITICAL
    Default: DEBUG
  AssetBucket:
    Type: String
    Default: 'rearc-data-provider' # existing bucket where new assets are added
    Description: Bucket containing assets and referenced in the manifest.
  ManifestBucketLoggingBucket:
    Type: String
    Default: 'adx-provider-coordinator-rearc-logging' # existing bucket where activity logs will be saved
    Description: Bucket to store server access logs associated with the manifest bucket
  ManifestBucketLoggingPrefix:
    Type: String
    Default: 'adx-publishing-workflow-test-logs/' # Prefix string (including the trailing slash)
    Description: Prefix location for server access logs associated with the manifest bucket
Mappings:
  SolutionInformation:
    SoltuionDetails:
      Version : '1.0.0'
  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      KeyPrefix: "%%SOLUTION_NAME%%/%%VERSION%%"
Resources:
  StartPublishingWorkflowFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: StartPublishingWorkflowFunction/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          STATE_MACHINE_ARN : !Ref PublishRevisionsStepFunction
          LOG_LEVEL : !Ref LoggingLevel
      Policies:
        - StepFunctionsExecutionPolicy: 
            StateMachineName: !GetAtt [ PublishRevisionsStepFunction, Name ]
        - S3ReadPolicy:
            BucketName:
              !Ref ManifestBucket
        - S3WritePolicy:
            BucketName:
              !Ref ManifestBucket
      Events:
        RevisionReady:
          Type: S3 
          Properties:
            Bucket: 
              Ref: DeploymentBucket
            Events: s3:ObjectCreated:*
            Filter: 
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .json
  PrepareRevisionMapInputFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: PrepareRevisionMapInputFunction/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          LOG_LEVEL : !Ref LoggingLevel
          Version: !FindInMap [ "SolutionInformation", "SoltuionDetails", "Version" ]
      Policies:
        - S3ReadPolicy:
            BucketName:
              !Ref ManifestBucket
        - S3ReadPolicy:
            BucketName:
              !Ref AssetBucket
        - AWSDataExchangeProviderFullAccess
  CreateRevisionAndPrepareJobMapInputFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: CreateRevisionAndPrepareJobMapInputFunction/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          LOG_LEVEL : !Ref LoggingLevel
          Version: !FindInMap [ "SolutionInformation", "SoltuionDetails", "Version" ]
      Policies:
        - S3ReadPolicy:
            BucketName:
              !Ref ManifestBucket
        - S3ReadPolicy:
            BucketName:
              !Ref AssetBucket
        - AWSDataExchangeProviderFullAccess
  CreateAndStartImportJobFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: CreateAndStartImportJobFunction/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          LOG_LEVEL : !Ref LoggingLevel
          Version: !FindInMap [ "SolutionInformation", "SoltuionDetails", "Version" ]
      Policies:
        - S3ReadPolicy:
            BucketName:
              !Ref ManifestBucket
        - S3ReadPolicy:
            BucketName:
              !Ref AssetBucket
        - AWSDataExchangeProviderFullAccess
  CheckJobStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CheckJobStatusFunction/
      Handler: app.lambda_handler
      Runtime: python3.8
      Role: !GetAtt [ CheckJobStatusFunctionRole, Arn ]
      Environment:
        Variables:
          LOG_LEVEL : !Ref LoggingLevel
  CheckJobStatusFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement : 
          - Effect : Allow
            Principal: 
              Service:
                - lambda.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ADXGetJobStatus
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action : 
                  - dataexchange:GetJob
                Resource : '*'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: "W11"
            reason: "Jobs created at runtime so ARNs will not be known a priori."
  FinalizeAndUpdateCatalogFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: FinalizeAndUpdateCatalogFunction/
      Handler: app.lambda_handler
      Runtime: python3.8
      Role: !GetAtt [ FinalizeAndUpdateCatalogFunctionRole, Arn ]
      Environment:
        Variables:
          LOG_LEVEL : !Ref LoggingLevel
          Version: !FindInMap [ "SolutionInformation", "SoltuionDetails", "Version" ]
  FinalizeAndUpdateCatalogFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement : 
          - Effect : Allow
            Principal: 
              Service:
                - lambda.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: MarketplaceActions
          PolicyDocument:
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action: 
                  - dataexchange:UpdateRevision
                Resource: '*' 
              - Effect: Allow
                Action: 
                  - aws-marketplace:StartChangeSet
                  - aws-marketplace:DescribeEntity
                Resource: '*'
    Metadata:
      cfn_nag:
        rules_to_suppress:   
          - id: "W11"
            reason: "aws-marketplace:StartChangeSet and aws-marketplace:DescribeEntity do not accept resource level permissions. For dataexchange:UpdateRevision, the revisions are created at runtime and are not known a priori."
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ManifestBucket
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration: 
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref ManifestBucketLoggingBucket
        LogFilePrefix: !Ref ManifestBucketLoggingPrefix
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: "W51"
            reason: "There is no logical policy to apply."    
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: ManifestBucket
      PolicyDocument:
        Statement:
        - Sid: HttpsOnly
          Action: '*'
          Effect: Deny
          Resource:
            Fn::Sub: arn:aws:s3:::${DeploymentBucket}/*
          Principal: '*'
          Condition:
            Bool:
              aws:SecureTransport: 'false'
  PublishRevisionsStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Step function workflow to coordinate the publication of new assets to one or more dataset revisions",
              "StartAt": "Prepare Revision Map Input",
              "TimeoutSeconds": 10800,
              "States": {
                "Prepare Revision Map Input": {
                  "Type": "Task",
                  "Resource": "${preparerevisionmapinputlambda}",
                  "Next": "Create Revisions"
                },
                "Create Revisions": {
                  "Type": "Map",
                  "End": true,
                  "InputPath": "$",
                  "ItemsPath": "$.RevisionMapInput",
                  "MaxConcurrency": 1,
                  "ResultPath": "$.RevisionDetails1.$",
                  "Parameters": {
                    "RevisionMapIndex.$": "$$.Map.Item.Value",
                    "Bucket.$": "$.Bucket",
                    "Key.$": "$.Key",
                    "ProductId.$": "$.ProductId",
                    "DatasetId.$": "$.DatasetId"
                  },
                  "Iterator": {
                    "StartAt": "Create a Revision and Prepare Import Job Map Input",
                    "States": {
                      "Create a Revision and Prepare Import Job Map Input": {
                        "Type": "Task",
                        "Resource": "${createrevisionandpreparejobmapinputlambda}",
                        "Next": "Create and Start an Import Assets Job"
                      },
                      "Create and Start an Import Assets Job": {
                        "Type": "Map",
                        "Next": "FinalizeAndUpdateCatalog",
                        "InputPath": "$",
                        "ItemsPath": "$.JobMapInput",
                        "MaxConcurrency": 10,
                        "ResultPath": "$.RevisionDetails2.$",
                        "Parameters": {
                          "JobMapIndex.$": "$$.Map.Item.Value",
                          "Bucket.$": "$.Bucket",
                          "Key.$": "$.Key",
                          "ProductId.$": "$.ProductId",
                          "DatasetId.$": "$.DatasetId",
                          "RevisionId.$": "$.RevisionId",
                          "RevisionMapIndex.$": "$.RevisionMapIndex"
                        },
                        "Iterator": {
                          "StartAt": "Create and Start Import Job",
                          "States": {
                            "Create and Start Import Job": {
                              "Type": "Task",
                              "Resource": "${createandstartimportjoblambda}",
                              "Next": "WaitProcessing"
                            },
                            "ChoiceBasedOnStatus": {
                              "Type": "Choice",
                              "Choices": [
                                {
                                  "Variable": "$.JobStatus",
                                  "StringEquals": "COMPLETED",
                                  "Next": "JobSucceeded"
                                },
                                {
                                  "Variable": "$.JobStatus",
                                  "StringEquals": "IN_PROGRESS",
                                  "Next": "WaitProcessing"
                                },
                                {
                                  "Variable": "$.JobStatus",
                                  "StringEquals": "ERROR",
                                  "Next": "JobFailed"
                                }
                              ]
                            },
                            "WaitProcessing": {
                              "Type": "Wait",
                              "Seconds": 10,
                              "Next": "CheckJobStatus"
                            },
                            "CheckJobStatus": {
                              "Type" : "Task",
                              "Resource" : "${checkjobstatuslambda}",
                              "Next": "ChoiceBasedOnStatus"
                            },
                            "JobFailed": {
                              "Type": "Pass",
                              "End": true
                            },
                            "JobSucceeded": {
                              "Type": "Pass",
                              "End": true
                            }
                          }
                        }
                      },
                      "FinalizeAndUpdateCatalog": {
                        "Type" : "Task",
                        "Resource" : "${finalizeandupdatecataloglambda}",
                        "End": true
                      }
                    }
                  }
                }
              }
            }
          - {preparerevisionmapinputlambda: !GetAtt [ PrepareRevisionMapInputFunction, Arn ], createrevisionandpreparejobmapinputlambda: !GetAtt [ CreateRevisionAndPrepareJobMapInputFunction, Arn ], createandstartimportjoblambda: !GetAtt [ CreateAndStartImportJobFunction, Arn ], checkjobstatuslambda: !GetAtt [ CheckJobStatusFunction, Arn ], finalizeandupdatecataloglambda: !GetAtt [ FinalizeAndUpdateCatalogFunction, Arn ]}
      RoleArn: !GetAtt [ SFExecutionRole, Arn ]
  SFExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: 
                  - !GetAtt [ PrepareRevisionMapInputFunction, Arn ]
                  - !GetAtt [ CreateRevisionAndPrepareJobMapInputFunction, Arn ]
                  - !GetAtt [ CreateAndStartImportJobFunction, Arn ]
                  - !GetAtt [ CheckJobStatusFunction, Arn ]
                  - !GetAtt [ FinalizeAndUpdateCatalogFunction, Arn ]
